title = "Gitleaks custom configuration"

# Extend the base Gitleaks configuration to keep all built-in rules
[extend]
useDefault = true

# Add custom rules for patterns not covered by default Gitleaks rules

[[rules]]
id = "aws-access-key-assignment"
description = "Detects AWS access keys assigned to variables, including in comments."
regex = '''(?i)aws_access_key[_\s]*=\s*["']([A-Za-z0-9!@#$%^&*()_+\-=\[\]{};:,.<>?/\\|`~]+)["']'''
secretGroup = 1
tags = ["aws", "access-key", "custom"]

[[rules]]
id = "hardcoded-generic-password"
description = "Detects hardcoded passwords assigned to a variable."
regex = '''(?i)(?:password|passwd|pwd)\s*=\s*["'](.{6,})["']'''
secretGroup = 1
tags = ["password", "hardcoded", "custom"]
[rules.allowlist]
regexes = [
  '''(?i)(?:password|passwd|pwd)\s*=\s*["'](test|demo|example|placeholder|your_|xxx|changeme|password123|\*+|\.+)["']''',
]

[[rules]]
id = "hardcoded-database-password"
description = "Detects database password assignments."
regex = '''(?i)(?:db_password|database_password|mysql_password|postgres_password|mongodb_password)\s*=\s*["'](.{6,})["']'''
secretGroup = 1
tags = ["database", "password", "custom"]

[[rules]]
id = "hardcoded-connection-string"
description = "Detects database connection strings with embedded credentials."
regex = '''(?i)(?:connection_string|conn_string|database_url|db_url)\s*=\s*['"'](.*://[^:]+:)([^@]+)(@.*)['"]'''
secretGroup = 2
tags = ["database", "connection-string", "custom"]

[[rules]]
id = "hardcoded-secret-key"
description = "Detects secret key assignments that might be missed by default rules."
regex = '''(?i)(?:secret_key|secretkey|app_secret)\s*=\s*['"']([a-zA-Z0-9_\-]{10,})['"]'''
secretGroup = 1
tags = ["secret", "hardcoded", "custom"]

[[rules]]
id = "hardcoded-encryption-key"
description = "Detects encryption key assignments."
regex = '''(?i)(?:encryption_key|encryptionkey|cipher_key)\s*=\s*['"']([a-zA-Z0-9+/=]{16,})['"]'''
secretGroup = 1
tags = ["encryption", "key", "custom"]

# Override default Sidekiq rule to add allowlist for false positives
[[rules]]
id = "sidekiq-secret"
description = "Sidekiq Secret (with false positive filtering)"
regex = '''(?i)BUNDLE_ENTERPRISE__CONTRIBSYS__COM\s*[:=]\s*['"]?([0-9a-f]{8}:[0-9a-f]{8})['"]?'''
secretGroup = 1
tags = ["sidekiq", "secret"]
[rules.allowlist]
paths = [
  '''README\.md''',
  '''\.github/workflows/.*\.yml''',
]
regexes = [
  '''BUNDLE_ENTERPRISE__CONTRIBSYS__COM''',
]

# Global allowlist to reduce false positives across all rules
[allowlist]
description = "Global allowlist for common false positives"

# Paths to exclude from scanning
paths = [
  '''(.*?)(jpg|gif|doc|pdf|bin|svg|socket)$''',
  '''(go|py)-lock\.(json|yaml)$''',
  '''^\.gitleaks\.toml$''',
  '''\.example$''',
  '''\.sample$''',
  '''\.template$''',
  '''^tests/fixtures/''',
  '''^examples/''',
  '''^docs/''',
]

# Regex patterns to exclude (be careful with these - they apply globally)
regexes = [
  # Exclude obvious placeholders with asterisks or dots
  '''password\s*=\s*["']\*+["']''',
  '''password\s*=\s*["']\.+["']''',
  # Exclude false positive Sidekiq detections
  '''BUNDLE_ENTERPRISE__CONTRIBSYS__COM''',
]

# Stopwords to ignore (case-insensitive partial matches)
stopwords = [
  "BUNDLE_ENTERPRISE",
  "CONTRIBSYS",
]
