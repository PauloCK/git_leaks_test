name: Credentials Detection

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  scan:
    name: Gitleaks Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine scan range
        id: scan_range
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
            HEAD_COMMIT="${{ github.event.pull_request.head.sha }}"
          else
            BASE_COMMIT="${{ github.event.before }}"
            HEAD_COMMIT="${{ github.event.after }}"
            
            if [[ "$BASE_COMMIT" == "0000000000000000000000000000000000000000" ]]; then
              BASE_COMMIT="HEAD~1"
            fi
          fi
          
          echo "base_commit=$BASE_COMMIT" >> $GITHUB_OUTPUT
          echo "head_commit=$HEAD_COMMIT" >> $GITHUB_OUTPUT
          echo "Base commit: $BASE_COMMIT"
          echo "Head commit: $HEAD_COMMIT"

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.24.3/gitleaks_8.24.3_linux_x64.tar.gz
          tar -xzf gitleaks_8.24.3_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: List files to be scanned
        id: changed_files
        run: |
          echo "Files being scanned:"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(git diff --name-only ${{ steps.scan_range.outputs.base_commit }} ${{ steps.scan_range.outputs.head_commit }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ steps.scan_range.outputs.base_commit }} ${{ steps.scan_range.outputs.head_commit }})
          fi
          echo "$CHANGED_FILES"
          # Save to file for gitleaks to scan
          echo "$CHANGED_FILES" > changed_files.txt
          
      - name: Run Gitleaks Scan on Changed Files
        id: gitleaks_scan
        run: |
          # Create a temporary config that only scans changed files
          if [ -s changed_files.txt ]; then
            echo "Scanning changed files..."
            
            # Build a regex pattern for changed files
            FILE_PATTERN=$(cat changed_files.txt | sed 's/[.]/\\./g' | sed 's|/|\\/|g' | paste -sd'|' -)
            
            # Create a temporary config with path allowlist
            cat .gitleaks.toml > .gitleaks.tmp.toml
            cat >> .gitleaks.tmp.toml << EOF

# Temporary: only scan changed files
[[allowlist]]
paths = []
EOF
            
            # Add all files NOT in the changed list to the allowlist (inverse logic)
            git ls-files | grep -vE "^(${FILE_PATTERN})$" | while read file; do
              echo "  '''${file}'''," >> .gitleaks.tmp.toml
            done || true
            
            # Run gitleaks on the entire repo but skip non-changed files
            gitleaks detect --config .gitleaks.tmp.toml --redact -v --report-format sarif --report-path results.sarif --no-git || EXIT_CODE=$?
            
            rm -f .gitleaks.tmp.toml
            
            if [ "$EXIT_CODE" = "1" ]; then
              echo "Gitleaks found secrets!"
              exit 1
            fi
          else
            echo "No files to scan"
          fi

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

      - name: Upload Gitleaks report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report-${{ github.sha }}
          path: results.sarif
          retention-days: 30

      - name: Comment on PR (if credentials found)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Gitleaks detected potential credentials in this PR!**\n\nPlease review the scan results and remove any exposed secrets before merging.\n\nCheck the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })
